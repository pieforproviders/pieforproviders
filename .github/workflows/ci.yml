name: CI
on:
  push:
    branches:
      - "develop"
  pull_request:
    types: [opened, synchronize]
jobs:
  one:
    runs-on: ubuntu-16.04
    steps:
      - name: Dump GitHub event
        env:
          GITHUB_CONTEXT: ${{ toJson(github.event) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump GitHub event path
        env:
          GITHUB_CONTEXT: ${{ toJson(github.event_path) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump GitHub event name
        env:
          GITHUB_CONTEXT: ${{ toJson(github.event_name) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump GitHub ref
        env:
          GITHUB_CONTEXT: ${{ toJson(github.ref) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump GitHub head ref
        env:
          GITHUB_CONTEXT: ${{ toJson(github.head_ref) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump GitHub base ref
        env:
          GITHUB_CONTEXT: ${{ toJson(github.base_ref) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump GitHub action
        env:
          GITHUB_CONTEXT: ${{ toJson(github.action) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump GitHub action path
        env:
          GITHUB_CONTEXT: ${{ toJson(github.action_path) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"
  lint_backend:
    name: Backend linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Setup Ruby
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 2.6.x
      - uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gem-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gem-
      - name: Rubocop
        run: |
          sudo apt-get -yqq install libpq-dev
          gem install bundler
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
          bundle exec rubocop
  brakeman:
    name: Brakeman Static Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Analyze code statically using Brakeman
        uses: artplan1/brakeman-action@v1.2.1
  lint_frontend:
    name: Frontend linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Cache NPM dependencies
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.OS }}-npm-cache-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-npm-cache-
      - name: Linting
        run: |
          cd client
          yarn
          yarn lint
  test_backend:
    name: Backend tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - uses: actions/checkout@v1
      - name: Setup Ruby
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 2.6.x
      - uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gem-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gem-
      - name: Install libraries
        run: sudo apt-get install libpq-dev
      - name: Bundle install
        run: |
          gem install bundler
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
      - name: Setup Database
        run: |
          cp config/database.yml.github-actions config/database.yml
          bundle exec rake db:create
          bundle exec rake db:structure:load
        env:
          RAILS_ENV: test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
      - name: Run RSpec
        run: bundle exec rspec --require rails_helper
        env:
          RAILS_ENV: test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          DEVISE_JWT_SECRET_KEY: imasecretkey
  test_frontend:
    name: Frontend tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Cache NPM dependencies
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.OS }}-npm-cache-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-npm-cache-
      - name: yarn test
        run: |
          cd client
          yarn
          yarn test --watchAll=false
  e2e_tests:
    name: E2E tests
    if: github.event == 'deployment'
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Setup Ruby
        uses: actions/setup-ruby@v1
        with:
          ruby-version: 2.6.x
      - uses: actions/cache@v1
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gem-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gem-
      - name: Install dependent libraries
        run: sudo apt-get install libpq-dev
      - name: Bundle install
        run: |
          gem install bundler
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
      - name: Set up database
        run: |
          cp config/database.yml.github-actions config/database.yml
          bundle exec rake db:create
          bundle exec rake db:structure:load
        env:
          RAILS_ENV: test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          DEVISE_JWT_SECRET_KEY: imasecretkey
      - name: Get Yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache Yarn dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Build frontend
        run: |
          yarn
          yarn heroku-postbuild
      - name: Run Cypress tests
        run: yarn cy:ci
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          DEVISE_JWT_SECRET_KEY: imasecretkey
