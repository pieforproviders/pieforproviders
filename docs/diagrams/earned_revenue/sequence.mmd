sequenceDiagram
    %% All "State" prefixed classes will belong to a State
    %% and will be named [State]Class in order to differentiate,
    %% because the logic and data may be different between states
    %% e.g. NebraskaDurationRule, etc.

    %% User requests earned_revenue, passing itself
    User->>+EarnedRevenueCalculator: earned_revenue(self, date)

    %% EarnedRevenueCalculator determines the right [State]EarnedRevenueCalculator
    %% based on the User's state, then requests earned_revenue, passing the User (?)
    EarnedRevenueCalculator->>+StateEarnedRevenueCalculator: earned_revenue(User, date)

    %% [State]EarnedRevenueCalculator loops attendances to
    %% store time_in_care and absence string
    StateEarnedRevenueCalculator->>+ServiceDay: attendances(User)
    loop attendances
      Attendance-->>ServiceDay: time_in_care, absence
    end
    StateEarnedRevenueCalculator->>+StateEarnedRevenueCalculator: absences?(attendances)
    alt Yes
        StateEarnedRevenueCalculator->>+StateEarnedRevenueCalculator: absences(attendances)
        %% this might need a different name, Validator doesn't sound right
        StateEarnedRevenueCalculator->>+StateAbsenceValidator: within_absence_limits?(absences)
        StateAbsenceValidator->>+Child: absences_this_month(date)
        Child-->>StateAbsenceValidator: absences_this_month
        StateAbsenceValidator->>+StateAbsenceLimit: absence_limit(absence)
        StateAbsenceLimit-->>StateAbsenceValidator: absence_limit(date)
        StateAbsenceValidator->>+StateAbsenceValidator: within_absence_limits?(absences_this_month, absence_limit)
        alt No
            StateAbsenceValidator-->>StateEarnedRevenueCalculator: false
            StateEarnedRevenueCalculator-->>EarnedRevenueCalculator: 0
        else Yes
            StateAbsenceValidator-->>StateEarnedRevenueCalculator: true
        end
    end
